/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopmanagementsystem;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import static shopmanagementsystem.SupplierUpdateDeleteForm.populate;

/**
 *
 * @author Sultan
 */
public class SupplierUpdateDeleteForm extends javax.swing.JFrame {

    /**
     * Creates new form SupplierUpdateDeleteForm
     */
    static Connection c = null;
    static Statement s = null;
    static ResultSet rs = null;

    public static void populate() {
        try {
            s = c.createStatement();
            rs = s.executeQuery("SELECT * FROM supplier ORDER BY supplierName ASC");
            while (rs.next()) {
                String supplierName1 = rs.getString("supplierName");
                int supplierID1 = rs.getInt("supplierID");
                SupplierUpdateDeleteForm.supplierSelector.addItem(supplierName1 + " - " + supplierID1);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                rs.close();
                s.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public static void depopulate() {
        try {
            s = c.createStatement();
            rs = s.executeQuery("SELECT * FROM supplier");
            while (rs.next()) {
                String supplierName1 = rs.getString("supplierName");
                int supplierID1 = rs.getInt("supplierID");
                SupplierUpdateDeleteForm.supplierSelector.removeItem(supplierName1 + " - " + supplierID1);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                rs.close();
                s.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    public SupplierUpdateDeleteForm() {
        initComponents();
        c = DB.java_db();

        AutoCompleteDecorator.decorate(supplierSelector);

        populate();

        //Setting error msgs & current values labels to null
        error1.setText("");
        error2.setText("");
        error3.setText("");
        error4.setText("");
        error5.setText("");
        error6.setText("");
        error7.setText("");
        error8.setText("");
        supplierID.setText("");
        supplierNameLabel.setText("");
        mobileLabel.setText("");
        streetAddressLabel.setText("");
        cityLabel.setText("");
        stateLabel.setText("");
        gstinLabel.setText("");
        panLabel.setText("");
        supplierBalancePaymentLabel.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        supplierSelector = new javax.swing.JComboBox<>();
        clearButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        error1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        error2 = new javax.swing.JLabel();
        error3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        error4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        error5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        error6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        supplierName = new javax.swing.JTextField();
        supplierNameLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        mobileLabel = new javax.swing.JLabel();
        streetAddressLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        streetAddress = new javax.swing.JTextField();
        gstinLabel = new javax.swing.JLabel();
        panLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        supplierBalancePaymentLabel = new javax.swing.JLabel();
        city = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        pan = new javax.swing.JTextField();
        mobile = new javax.swing.JTextField();
        error7 = new javax.swing.JLabel();
        gstin = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        state = new javax.swing.JComboBox<>();
        supplierID = new javax.swing.JLabel();
        supplierBalancePayment = new javax.swing.JTextField();
        error8 = new javax.swing.JLabel();
        selectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("UPDATE/DELETE SUPPLIER");
        setAlwaysOnTop(true);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(138, 43, 226));
        jLabel1.setText("Supplier Name :");

        updateButton.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(219, 112, 147));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        supplierSelector.setEditable(true);
        supplierSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        supplierSelector.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                supplierSelectorItemStateChanged(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        clearButton.setForeground(new java.awt.Color(219, 112, 147));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Current Values");

        error1.setForeground(new java.awt.Color(255, 0, 0));
        error1.setText("error1");

        jLabel3.setForeground(new java.awt.Color(138, 43, 226));
        jLabel3.setText("Supplier Name :");

        error2.setForeground(new java.awt.Color(255, 0, 0));
        error2.setText("error2");

        error3.setForeground(new java.awt.Color(255, 0, 0));
        error3.setText("error3");

        jLabel4.setForeground(new java.awt.Color(138, 43, 226));
        jLabel4.setText("Mobile Number :");

        error4.setForeground(new java.awt.Color(255, 0, 0));
        error4.setText("error4");

        jLabel5.setForeground(new java.awt.Color(138, 43, 226));
        jLabel5.setText("State :");

        error5.setForeground(new java.awt.Color(255, 0, 0));
        error5.setText("error5");

        jLabel6.setForeground(new java.awt.Color(138, 43, 226));
        jLabel6.setText("GSTIN :");

        error6.setForeground(new java.awt.Color(255, 0, 0));
        error6.setText("error6");

        jLabel7.setForeground(new java.awt.Color(138, 43, 226));
        jLabel7.setText("PAN Number :");

        deleteButton.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(219, 112, 147));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(138, 43, 226));
        jLabel8.setText("Balance Payment :");

        supplierName.setEnabled(false);
        supplierName.setFocusable(false);
        supplierName.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                supplierNameCaretUpdate(evt);
            }
        });

        supplierNameLabel.setForeground(new java.awt.Color(0, 153, 255));
        supplierNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        supplierNameLabel.setText("supplierNameLabel");

        jLabel10.setForeground(new java.awt.Color(138, 43, 226));
        jLabel10.setText("Street Address :");

        mobileLabel.setForeground(new java.awt.Color(0, 153, 255));
        mobileLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mobileLabel.setText("mobileLabel");

        streetAddressLabel.setForeground(new java.awt.Color(0, 153, 255));
        streetAddressLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        streetAddressLabel.setText("streetAddressLabel");

        stateLabel.setForeground(new java.awt.Color(0, 153, 255));
        stateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stateLabel.setText("stateLabel");

        streetAddress.setEnabled(false);
        streetAddress.setFocusable(false);

        gstinLabel.setForeground(new java.awt.Color(0, 153, 255));
        gstinLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gstinLabel.setText("gstinLabel");

        panLabel.setForeground(new java.awt.Color(0, 153, 255));
        panLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panLabel.setText("panLabel");

        jLabel12.setForeground(new java.awt.Color(138, 43, 226));
        jLabel12.setText("City :");

        cityLabel.setForeground(new java.awt.Color(0, 153, 255));
        cityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cityLabel.setText("cityLabel");

        supplierBalancePaymentLabel.setForeground(new java.awt.Color(0, 153, 255));
        supplierBalancePaymentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        supplierBalancePaymentLabel.setText("supplierBalancePaymentLabel");

        city.setEnabled(false);
        city.setFocusable(false);
        city.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                cityCaretUpdate(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 153, 153));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Values To Be Updated");

        pan.setEnabled(false);
        pan.setFocusable(false);
        pan.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                panCaretUpdate(evt);
            }
        });
        pan.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                panFocusLost(evt);
            }
        });

        mobile.setEnabled(false);
        mobile.setFocusable(false);
        mobile.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                mobileCaretUpdate(evt);
            }
        });
        mobile.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mobileFocusLost(evt);
            }
        });

        error7.setForeground(new java.awt.Color(255, 0, 0));
        error7.setText("error7");

        gstin.setEnabled(false);
        gstin.setFocusable(false);
        gstin.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                gstinCaretUpdate(evt);
            }
        });
        gstin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                gstinFocusLost(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(138, 43, 226));
        jLabel15.setText("ID :");

        state.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Jammu & Kashmir", "Himachal Pradesh", "Punjab", "Chandigarh", "Uttarakhand", "Haryana", "Delhi", "Rajasthan", "Uttar Pradesh", "Bihar", "Sikkim", "Arunachal Pradesh", "Nagaland", "Manipur", "Mizoram", "Tripura", "Meghalaya", "Assam", "West Bengal", "Jharkhand", "Orissa", "Chhattisgarh", "Madhya Pradesh", "Gujarat", "Daman & Diu", "Dadra & Nagar Haveli", "Maharashtra", "Andhra Pradesh", "Karnataka", "Goa", "Lakshadweep", "Kerala", "Tamil Nadu", "Puducherry", "Andaman & Nicobar Islands", "Telengana", "Andrapradesh(New)" }));
        state.setEnabled(false);
        state.setFocusable(false);

        supplierID.setForeground(new java.awt.Color(138, 43, 226));
        supplierID.setText("supplierID");

        supplierBalancePayment.setEnabled(false);
        supplierBalancePayment.setFocusable(false);
        supplierBalancePayment.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                supplierBalancePaymentCaretUpdate(evt);
            }
        });

        error8.setForeground(new java.awt.Color(255, 0, 0));
        error8.setText("error8");

        selectButton.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        selectButton.setForeground(new java.awt.Color(219, 112, 147));
        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(supplierID, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(supplierSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(200, 200, 200)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(supplierNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mobileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gstinLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(panLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(supplierBalancePaymentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(streetAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pan, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gstin)
                                    .addComponent(state, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(city, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(streetAddress, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mobile, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(supplierName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(supplierBalancePayment))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(error1)
                                    .addComponent(error2)
                                    .addComponent(error3)
                                    .addComponent(error4)
                                    .addComponent(error5)
                                    .addComponent(error6)
                                    .addComponent(error7)
                                    .addComponent(error8))))
                        .addGap(0, 194, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(supplierSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9)
                    .addComponent(jLabel15)
                    .addComponent(supplierID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(supplierNameLabel)
                    .addComponent(supplierName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(mobileLabel)
                    .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(streetAddressLabel)
                    .addComponent(streetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cityLabel)
                    .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(stateLabel)
                    .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(gstinLabel)
                    .addComponent(gstin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(panLabel)
                    .addComponent(pan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(supplierBalancePaymentLabel)
                    .addComponent(supplierBalancePayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error8))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:

        //Taking all the entered values in their respective strings
        String supplierName1 = this.supplierName.getText();
        String mobile1 = this.mobile.getText();
        String streetAddress1 = this.streetAddress.getText();
        String city1 = this.city.getText();
        String state1 = this.state.getSelectedItem().toString();
        String gstin1 = this.gstin.getText();
        String pan1 = this.pan.getText();
        String supplierBalancePayment1 = this.supplierBalancePayment.getText();

        //Setting all error msg to null
        error1.setText("");
        error2.setText("");
        error3.setText("");
        error4.setText("");
        error5.setText("");
        error6.setText("");
        error7.setText("");
        error8.setText("");

        String supplierNameLabel1 = this.supplierNameLabel.getText();
        String mobileLabel1 = this.mobileLabel.getText();
        String streetAddressLabel1 = this.streetAddressLabel.getText();
        String cityLabel1 = this.cityLabel.getText();
        String stateLabel1 = this.stateLabel.getText();
        String gstinLabel1 = this.gstinLabel.getText();
        String panLabel1 = this.panLabel.getText();
        String supplierBalancePaymentLabel1 = this.supplierBalancePaymentLabel.getText();

        //Regular expression validations
        int regFlag;
        int regFlag1, regFlag2, regFlag3, regFlag4, regFlag5, regFlag6;
        Pattern namePattern = Pattern.compile("^[a-zA-Z\\s]*$");
        Pattern mobilePattern = Pattern.compile("^[6-9]\\d{9}$|^$");
        Pattern cityPattern = Pattern.compile("^[a-zA-Z]+(?:[\\s-][a-zA-Z]+)*$|^$");
        Pattern gstinPattern = Pattern.compile("^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{3}$|^$");
        Pattern panPattern = Pattern.compile("^[A-Z]{5}[0-9]{4}[A-Z]{1}|^$");
        Pattern costPattern = Pattern.compile("^[0-9.]*$|^$");
        Matcher nameMatcher = namePattern.matcher(supplierName1);
        if (!nameMatcher.matches()) {
            error1.setText("Invalid Supplier Name!");
            regFlag1 = 1;
        } else {
            regFlag1 = 0;
        }
        Matcher mobileMatcher = mobilePattern.matcher(mobile1);
        if (!mobileMatcher.matches()) {
            error2.setText("Invalid Mobile Number!");
            regFlag2 = 1;
        } else {
            regFlag2 = 0;
        }
        Matcher cityMatcher = cityPattern.matcher(city1);
        if (!cityMatcher.matches()) {
            error4.setText("Invalid City Name!");
            regFlag3 = 1;
        } else {
            regFlag3 = 0;
        }
        Matcher gstinMatcher = gstinPattern.matcher(gstin1);
        if (!gstinMatcher.matches()) {
            error6.setText("Invalid GSTIN!");
            regFlag4 = 1;
        } else {
            regFlag4 = 0;
        }
        Matcher panMatcher = panPattern.matcher(pan1);
        if (!panMatcher.matches()) {
            error7.setText("Invalid PAN Number!");
            regFlag5 = 1;
        } else {
            regFlag5 = 0;
        }
        Matcher costMatcher = costPattern.matcher(supplierBalancePayment1);
        if (!costMatcher.matches()) {
            error8.setText("Invalid Amount!");
            regFlag6 = 1;
        } else {
            regFlag6 = 0;
        }
        if (regFlag1 == 1 || regFlag2 == 1 || regFlag3 == 1 || regFlag4 == 1 || regFlag5 == 1 || regFlag6 == 1) {
            regFlag = 1;
        } else {
            regFlag = 0;
        }

        //Duplicate entries validations for unique values
        int dupFlag = 0;
        int dupFlag1, dupFlag2, dupFlag3;
        try {
            s = c.createStatement();
            String sql = "SELECT * FROM supplier";
            rs = s.executeQuery(sql);
            while (rs.next()) {
                String mobile2 = rs.getString("mobile");
                String gstin2 = rs.getString("gstin");
                String pan2 = rs.getString("pan");
                if (mobile1.equals(mobile2) & !mobile2.equals("")) {
                    error2.setText("Mobile Number Already Exists!");
                    dupFlag1 = 1;
                } else {
                    dupFlag1 = 0;
                }
                if (gstin1.equals(gstin2) && !gstin2.equals("")) {
                    error6.setText("GSTIN Already Exists!");
                    dupFlag2 = 1;
                } else {
                    dupFlag2 = 0;
                }
                if (pan1.equals(pan2) & !pan2.equals("")) {
                    error7.setText("PAN Number Already Exists!");
                    dupFlag3 = 1;
                } else {
                    dupFlag3 = 0;
                }
                if (dupFlag1 == 1 || dupFlag2 == 1 || dupFlag3 == 1) {
                    dupFlag = 1;
                    break;
                } else {
                    dupFlag = 0;
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e);
        } finally {
            try {
                rs.close();
                s.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e);
            }
        }

        //Duplicate entries validations for non unique values
        int dupnFlag;
        int dupnFlag1, dupnFlag2, dupnFlag3, dupnFlag4, dupnFlag5;
        if (supplierName1.equalsIgnoreCase(supplierNameLabel1) && !supplierNameLabel1.equals("")) {
            error1.setText("Supplier Name Already Exists!");
            dupnFlag1 = 1;
        } else {
            dupnFlag1 = 0;
        }
        if (streetAddress1.equalsIgnoreCase(streetAddressLabel1) && !streetAddressLabel1.equals("")) {
            error3.setText("Street Address Already Exists!");
            dupnFlag2 = 1;
        } else {
            dupnFlag2 = 0;
        }
        if (city1.equalsIgnoreCase(cityLabel1) && !cityLabel1.equals("")) {
            error4.setText("City Already Exists!");
            dupnFlag3 = 1;
        } else {
            dupnFlag3 = 0;
        }
        if (state1.equalsIgnoreCase(stateLabel1)) {
            error5.setText("State Already Selected!");
            dupnFlag4 = 1;
        } else {
            dupnFlag4 = 0;
        }
        if (supplierBalancePayment1.equalsIgnoreCase(supplierBalancePaymentLabel1) && !supplierBalancePaymentLabel1.equals("")) {
            error8.setText("Duplicate Balance Payment!");
            dupnFlag5 = 1;
        } else {
            dupnFlag5 = 0;
        }
        if (dupnFlag1 == 1 || dupnFlag2 == 1 || dupnFlag3 == 1 || dupnFlag4 == 1
                || dupnFlag5 == 1) {
            dupnFlag = 1;
        } else {
            dupnFlag = 0;
        }

        //If no field is filled then it will display error msg
        int reqFlag1;
        int reqFlag2;
        String supplierSelector1 = SupplierUpdateDeleteForm.supplierSelector.getSelectedItem().toString();
        if (supplierSelector1.equals(" ") || supplierSelector1.equals("")) {
            reqFlag1 = 1;
            JOptionPane.showMessageDialog(this, "No Supplier Selected!");
        } else {
            reqFlag1 = 0;
        }
        if (!(supplierSelector1.equals(" ") || supplierSelector1.equals("")) && supplierName1.equals("") && mobile1.equals("")
                && streetAddress1.equals("") && city1.equals("") && state1.equals(" ")
                && gstin1.equals("") && pan1.equals("")
                && supplierBalancePayment1.equals("")) {
            reqFlag2 = 1;
            JOptionPane.showMessageDialog(this, "You have not entered any values to be updated!");
        } else {
            reqFlag2 = 0;
        }

        //Adding data to database only if all the flags are 0
        if (regFlag == 0 && dupFlag == 0 && dupnFlag == 0 && reqFlag1 == 0 && reqFlag2 == 0) {
            int ans = JOptionPane.showConfirmDialog(this, "Update Supplier?", "Supplier Updation", JOptionPane.YES_NO_OPTION);
            if (ans == 0) {
                try {
                    String str = SupplierUpdateDeleteForm.supplierSelector.getSelectedItem().toString();
                    String cID = str.replaceAll("[^0-9]", "");
                    int supplierID1 = Integer.parseInt(cID);
                    s = c.createStatement();
                    if (!supplierName1.equals("")) {
                        s.executeUpdate("UPDATE supplier SET supplierName='" + supplierName1 + "' WHERE supplierID=" + supplierID1);
                        SupplierUpdateDeleteForm.depopulate();
                        SupplierUpdateDeleteForm.supplierSelector.removeItem(this.supplierNameLabel.getText() + " - " + supplierID1);
                        SupplierUpdateDeleteForm.populate();
//                        SupplierUpdateDeleteForm.supplierSelector.setSelectedItem(supplierName1 + " - " + supplierID1);
//                        this.selectButton.doClick();
                    }
                    if (!mobile1.equals("")) {
                        s.executeUpdate("UPDATE supplier SET mobile='" + mobile1 + "' WHERE supplierID=" + supplierID1);
                    }
                    if (!streetAddress1.equals("")) {
                        s.executeUpdate("UPDATE supplier SET streetAddress='" + streetAddress1 + "' WHERE supplierID=" + supplierID1);
                    }
                    if (!city1.equals("")) {
                        s.executeUpdate("UPDATE supplier SET city='" + city1 + "' WHERE supplierID=" + supplierID1);
                    }
                    if (!state1.equals(" ")) {
                        s.executeUpdate("UPDATE supplier SET state='" + state1 + "' WHERE supplierID=" + supplierID1);
                    }
                    if (!gstin1.equals("")) {
                        s.executeUpdate("UPDATE supplier SET gstin='" + gstin1 + "' WHERE supplierID=" + supplierID1);
                    }
                    if (!pan1.equals("")) {
                        s.executeUpdate("UPDATE supplier SET pan='" + pan1 + "' WHERE supplierID=" + supplierID1);
                    }
                    if (!supplierBalancePayment1.equals("")) {
                        s.executeUpdate("UPDATE supplier SET supplierBalancePayment=" + supplierBalancePayment1 + " WHERE supplierID=" + supplierID1);
                    }
                    JOptionPane.showMessageDialog(this, "Supplier Updated!");
                    rs = s.executeQuery("SELECT * FROM supplier WHERE supplierID=" + supplierID1);
                    while (rs.next()) {
                        String supplierSelected = rs.getString("supplierName");
                        SupplierUpdateDeleteForm.supplierSelector.setSelectedIndex(0);
                        SupplierUpdateDeleteForm.supplierSelector.setSelectedItem(supplierSelected + " - " + supplierID1);
                        this.selectButton.doClick();
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, e);
                } finally {
                    try {
                        rs.close();
                        s.close();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, e);
                    }
                }
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void supplierSelectorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_supplierSelectorItemStateChanged
        // TODO add your handling code here:
        supplierNameLabel.setText("");
        supplierName.setText("");
        mobileLabel.setText("");
        mobile.setText("");
        streetAddressLabel.setText("");
        streetAddress.setText("");
        cityLabel.setText("");
        city.setText("");
        stateLabel.setText("");
        state.setSelectedItem(" ");
        gstinLabel.setText("");
        gstin.setText("");
        panLabel.setText("");
        pan.setText("");
        supplierBalancePaymentLabel.setText("");
        supplierBalancePayment.setText("");
        supplierID.setText("");
        supplierName.setEnabled(false);
        mobile.setEnabled(false);
        streetAddress.setEnabled(false);
        city.setEnabled(false);
        state.setEnabled(false);
        gstin.setEnabled(false);
        pan.setEnabled(false);
        supplierBalancePayment.setEnabled(false);

        supplierName.setFocusable(false);
        mobile.setFocusable(false);
        streetAddress.setFocusable(false);
        city.setFocusable(false);
        state.setFocusable(false);
        gstin.setFocusable(false);
        pan.setFocusable(false);
        supplierBalancePayment.setFocusable(false);
    }//GEN-LAST:event_supplierSelectorItemStateChanged

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        String supplierSelector1 = SupplierUpdateDeleteForm.supplierSelector.getSelectedItem().toString();
        if (supplierSelector1.equals("") || supplierSelector1.equals(" ")) {
            supplierID.setText("");
        }
        supplierName.setText("");
        mobile.setText("");
        streetAddress.setText("");
        city.setText("");
        state.setSelectedItem(" ");
        gstin.setText("");
        pan.setText("");
        supplierBalancePayment.setText("");
        error1.setText("");
        error2.setText("");
        error3.setText("");
        error4.setText("");
        error5.setText("");
        error6.setText("");
        error7.setText("");
        error8.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String str = SupplierUpdateDeleteForm.supplierSelector.getSelectedItem().toString();
        String val = str.replaceAll(" ", "");
        if (val.equals("")) {
            JOptionPane.showMessageDialog(this, "No Supplier Selected!");
        } else {
            String cID = str.replaceAll("[^0-9]", "");
            String supplierName1 = str.replaceAll("[^a-zA-Z]", "");
            int supplierID1 = Integer.parseInt(cID);
            int ans = JOptionPane.showConfirmDialog(this, "Delete Supplier : " + supplierName1 + "?", "Supplier Deletion", JOptionPane.YES_NO_OPTION);
            if (ans == 0) {
                try {
                    s = c.createStatement();
                    String sql = "DELETE FROM supplier WHERE supplierID=" + supplierID1;
                    s.executeUpdate(sql);
                    c.close();
                    JOptionPane.showMessageDialog(this, "Supplier '" + supplierName1 + "' Deleted!");
                    new SupplierUpdateDeleteForm().setVisible(true);
                    this.dispose();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, e);
                } finally {
                    try {
                        s.close();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, e);
                    }
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void supplierNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_supplierNameCaretUpdate
        // TODO add your handling code here:
        error1.setText("");
        String supplierName1 = this.supplierName.getText();
        Pattern namePattern = Pattern.compile("^[a-zA-Z\\s]*$");
        Matcher nameMatcher = namePattern.matcher(supplierName1);
        if (!nameMatcher.matches()) {
            error1.setText("Invalid Name!");
        }
    }//GEN-LAST:event_supplierNameCaretUpdate

    private void cityCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_cityCaretUpdate
        // TODO add your handling code here:
        error4.setText("");
        String city1 = this.city.getText();
        Pattern cityPattern = Pattern.compile("^[a-zA-Z]+(?:[\\s-][a-zA-Z]+)*$|^$");
        Matcher cityMatcher = cityPattern.matcher(city1);
        if (!cityMatcher.matches()) {
            error4.setText("Invalid City Name!");
        }
    }//GEN-LAST:event_cityCaretUpdate

    private void panCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_panCaretUpdate
        // TODO add your handling code here:
        error7.setText("");
    }//GEN-LAST:event_panCaretUpdate

    private void panFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panFocusLost
        // TODO add your handling code here:
        error7.setText("");
        String pan1 = this.pan.getText();
        Pattern panPattern = Pattern.compile("^[A-Z]{5}[0-9]{4}[A-Z]{1}|^$");
        Matcher panMatcher = panPattern.matcher(pan1);
        if (!panMatcher.matches()) {
            error7.setText("Invalid PAN Number!");
        }
    }//GEN-LAST:event_panFocusLost

    private void mobileCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_mobileCaretUpdate
        // TODO add your handling code here:
        error2.setText("");
    }//GEN-LAST:event_mobileCaretUpdate

    private void mobileFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mobileFocusLost
        // TODO add your handling code here:
        error2.setText("");
        String mobile1 = this.mobile.getText();
        Pattern mobilePattern = Pattern.compile("^[6-9]\\d{9}$|^$");
        Matcher mobileMatcher = mobilePattern.matcher(mobile1);
        if (!mobileMatcher.matches()) {
            error2.setText("Invalid Mobile Number!");
        }
    }//GEN-LAST:event_mobileFocusLost

    private void gstinCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_gstinCaretUpdate
        // TODO add your handling code here:
        error6.setText("");
    }//GEN-LAST:event_gstinCaretUpdate

    private void gstinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gstinFocusLost
        // TODO add your handling code here:
        error6.setText("");
        String gstin1 = this.gstin.getText();
        Pattern gstinPattern = Pattern.compile("^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{3}$|^$");
        Matcher gstinMatcher = gstinPattern.matcher(gstin1);
        if (!gstinMatcher.matches()) {
            error6.setText("Invalid GSTIN!");
        }
    }//GEN-LAST:event_gstinFocusLost

    private void supplierBalancePaymentCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_supplierBalancePaymentCaretUpdate
        // TODO add your handling code here:
        error8.setText("");
        String supplierBalancePayment1 = this.supplierBalancePayment.getText();
        Pattern costPattern = Pattern.compile("^[0-9.]*$|^$");
        Matcher supplierBalancePaymentMatcher = costPattern.matcher(supplierBalancePayment1);
        if (!supplierBalancePaymentMatcher.matches()) {
            error8.setText("Invalid Amount!");
        }
    }//GEN-LAST:event_supplierBalancePaymentCaretUpdate

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        // TODO add your handling code here:
        String supplierName1 = (String) SupplierUpdateDeleteForm.supplierSelector.getEditor().getItem();
        int flag = 0;
        int count = SupplierUpdateDeleteForm.supplierSelector.getItemCount();
        for (int i = 1; i < count; i++) {
            String supplierName2 = SupplierUpdateDeleteForm.supplierSelector.getItemAt(i);
            if (supplierName1.equals(supplierName2)) {
                flag = 1;
                break;
            } else {
                flag = 0;
            }
        }

        supplierNameLabel.setText("");
        supplierName.setText("");
        mobileLabel.setText("");
        mobile.setText("");
        streetAddressLabel.setText("");
        streetAddress.setText("");
        cityLabel.setText("");
        city.setText("");
        stateLabel.setText("");
        state.setSelectedItem(" ");
        gstinLabel.setText("");
        gstin.setText("");
        panLabel.setText("");
        pan.setText("");
        supplierBalancePaymentLabel.setText("");
        supplierBalancePayment.setText("");
        supplierID.setText("");
        supplierName.setEnabled(false);
        mobile.setEnabled(false);
        streetAddress.setEnabled(false);
        city.setEnabled(false);
        state.setEnabled(false);
        gstin.setEnabled(false);
        pan.setEnabled(false);
        supplierBalancePayment.setEnabled(false);

        supplierName.setFocusable(false);
        mobile.setFocusable(false);
        streetAddress.setFocusable(false);
        city.setFocusable(false);
        state.setFocusable(false);
        gstin.setFocusable(false);
        pan.setFocusable(false);
        supplierBalancePayment.setFocusable(false);
        if (flag == 1) {
            String val = supplierName1.replaceAll("\\s", "");
            if (!val.equals("")) {
                String cID = supplierName1.replaceAll("[^0-9]", "");
                int supplierID1 = Integer.parseInt(cID);

                try {
                    supplierName.setEnabled(true);
                    mobile.setEnabled(true);
                    streetAddress.setEnabled(true);
                    city.setEnabled(true);
                    state.setEnabled(true);
                    gstin.setEnabled(true);
                    pan.setEnabled(true);
                    supplierBalancePayment.setEnabled(true);

                    supplierName.setFocusable(true);
                    mobile.setFocusable(true);
                    streetAddress.setFocusable(true);
                    city.setFocusable(true);
                    state.setFocusable(true);
                    gstin.setFocusable(true);
                    pan.setFocusable(true);
                    supplierBalancePayment.setFocusable(true);

                    s = c.createStatement();
                    String sql = "SELECT * FROM supplier WHERE supplierID=" + supplierID1;
                    rs = s.executeQuery(sql);
                    String supplierNameLabel1, mobileLabel1, streetAddressLabel1, cityLabel1, stateLabel1,
                            gstinLabel1, panLabel1, supplierBalancePaymentLabel1;
                    supplierNameLabel1 = mobileLabel1 = streetAddressLabel1 = cityLabel1 = stateLabel1
                            = gstinLabel1 = panLabel1 = supplierBalancePaymentLabel1 = "";
                    while (rs.next()) {
                        supplierID1 = rs.getInt("supplierID");
                        supplierNameLabel1 = rs.getString("supplierName");
                        mobileLabel1 = rs.getString("mobile");
                        streetAddressLabel1 = rs.getString("streetAddress");
                        cityLabel1 = rs.getString("city");
                        stateLabel1 = rs.getString("state");
                        gstinLabel1 = rs.getString("gstin");
                        panLabel1 = rs.getString("pan");
                        supplierBalancePaymentLabel1 = rs.getString("supplierBalancePayment");
                    }
                    supplierID.setText(String.valueOf(supplierID1));
                    supplierNameLabel.setText(supplierNameLabel1);
                    mobileLabel.setText(mobileLabel1);
                    streetAddressLabel.setText(streetAddressLabel1);
                    cityLabel.setText(cityLabel1);
                    stateLabel.setText(stateLabel1);
                    gstinLabel.setText(gstinLabel1);
                    panLabel.setText(panLabel1);
                    supplierBalancePaymentLabel.setText(supplierBalancePaymentLabel1);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, e);
                } finally {
                    try {
                        rs.close();
                        s.close();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, e);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Supplier Not Added/Selected!");
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try {
            //Will dispose CustomerAddForm
            c.close();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SupplierUpdateDeleteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SupplierUpdateDeleteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SupplierUpdateDeleteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SupplierUpdateDeleteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SupplierUpdateDeleteForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField city;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel error1;
    private javax.swing.JLabel error2;
    private javax.swing.JLabel error3;
    private javax.swing.JLabel error4;
    private javax.swing.JLabel error5;
    private javax.swing.JLabel error6;
    private javax.swing.JLabel error7;
    private javax.swing.JLabel error8;
    private javax.swing.JTextField gstin;
    private javax.swing.JLabel gstinLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField mobile;
    private javax.swing.JLabel mobileLabel;
    private javax.swing.JTextField pan;
    private javax.swing.JLabel panLabel;
    private javax.swing.JButton selectButton;
    private javax.swing.JComboBox<String> state;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField streetAddress;
    private javax.swing.JLabel streetAddressLabel;
    private javax.swing.JTextField supplierBalancePayment;
    private javax.swing.JLabel supplierBalancePaymentLabel;
    private javax.swing.JLabel supplierID;
    private javax.swing.JTextField supplierName;
    private javax.swing.JLabel supplierNameLabel;
    private static javax.swing.JComboBox<String> supplierSelector;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
